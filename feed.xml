<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qiong Wu</title>
    <description>The personal website of Qiong Wu. He is a programmer, hacker, algorist, and tennis player.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>My 2019</title>
        <description>&lt;p&gt;In the retrospect last year, I wrote - &quot;in 2019, there will be more uncertainties both at work and in my life. Many of them are out of my control. I hope I could find solutions for most of whatever comes along the way. More importantly, I can put the things that I’ve learned in 2018 and the past to use to become a bit stronger and wiser.&quot; Though I had still done poorly for lots of things, I did get bits of improvements here and there. In general, it was not the best nor the easiest year, but it was a good one.&lt;/p&gt;

&lt;p&gt;First off, it was a good year of reading. I ended up finishing 21 books and, more importantly, reading the first three volumes of &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming&quot;&gt;The Art of Computer Programming&lt;/a&gt;&lt;/em&gt;. It was always enjoyable to admire the masterpiece and I would revisit them soon because I only understand half of the contents at best. It felt like a must-have journey for a pilgrim. Or, one had to kiss the ring while entering the kingdom. Besides, I completed roughly an equal amount of books about system and algorithm, as I wished at the end of 2018. Several books about the operating systems gave me a better appreciation for the terrain that I’m working on. It was surprising to realize how classic knowledge holds in an ever fast-changing field - I was still dealing with issues that had been thoroughly investigated in the book &lt;em&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/337343.The_Design_of_the_UNIX_Operating_System&quot;&gt;The Design of the UNIX Operating System&lt;/a&gt;&lt;/em&gt; written in 1986. It reassured me that almost all of the problems were not unique. As long as one knew better and strived to keep the underlying principles straight, many issues could be resolved or avoided with little effort in coding.&lt;/p&gt;

&lt;p&gt;Besides TAOCP, &lt;em&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/160171.Just_for_Fun?ac=1&amp;amp;from_search=true&amp;amp;qid=jJDSJ58wF2&amp;amp;rank=1&quot;&gt;Just for Fun&lt;/a&gt;&lt;/em&gt; from Linus Torvalds becomes one of my favorite books. His dry humor is ridiculous as if he tries to make peace with himself. I guess that is one of the benefits when a person spends too much time with self. Besides, he does lots of introspections and provides plenty of insights into both programming and system designs. His thoughts are much like the nowadays computer system - all things binary - 0 or 1, right or wrong, gorgeous or disgusting. All of them make it enjoyable to read. At the end of the book, he tries hard to be a mentor for the younger generations by extending his knowledge about programming to lives at large. But the obvious stiffness makes the reading even more joyful.&lt;/p&gt;

&lt;p&gt;Tons of things had happened at work in which the &lt;a href=&quot;https://www.theverge.com/2019/2/11/18220960/amazon-eero-acquisition-announced&quot;&gt;acquisition&lt;/a&gt; was the most impactful one. I was asked quite often during interviews about the changes and my thoughts on the acquisition. With a few exceptions, I felt it was good for the company and eventually for our customers. I’d categorize eero as a software company, but in reality all of its main products were about hardware. During almost five years I had been working here, I had seen many hardware startups rose and fell. There were a few that survived to see IPOs, but they all followed by constant struggling. Most of these cases could attribute to the differences between hardware and software, It had much longer development cycles and the end results were more of hit-or-miss rather than constantly evolving and improving. They consistently challenged the “survival mode” that a startup was in. For now, we did not have to worry about the three-month runway but had the luxury to plan for three to five years. We were finally able to get back to pay technical debts. In the long run, all of the effort we had put in today would tremendously payback in the future when we had a more performant backbone in the embedded system and a more robust framework for regression tests. For me, I was able to have the chance to dabble in diverse directions - test automation, refactoring multithreaded code, and building new modules. Every experience helped me know a bit better.&lt;/p&gt;

&lt;p&gt;Speaking of knowing better, upgrading the kernel while switching to &lt;a href=&quot;https://www.yoctoproject.org/&quot;&gt;Yocto&lt;/a&gt; at work was a nice opportunity to expand my horizon. I wasted lots of time to figure out “how” to do things right. On the other hand, however, as soon as I finished the work, I knew what were the components, where to find them, what were the potential pitfalls, and what was the correct way to piece them together. But that was it - there was barely any shades of gray for it. Either one had done work related to the build/operating systems or not. If yes, one knew all aspects and it was relatively easy to do it again. If no, it is almost impossible to derive the steps from some basic concepts. My thoughts also vary a bit. When someone says “I’ve worked with four build systems,” my reply changes from “wow, that is amazing” to “okey, good for you.”&lt;/p&gt;

&lt;p&gt;It might be the characteristics of the part of the system as opposed to theory in the realm of computer science. It feels like a checkbox and less interesting though equally challenging to climb up the learning curve. I’d rather spend more time reading math or algorithm books, or simply solving the questions from TAOCP. At the end of the day, I’d like to feel good about myself by knowing something a little bit better :) What is more, another year-long programming also gives me some new perspectives into this activity. Beauty is never a goal when I write code. It is always about solving problems. But if the outcoming is ugly or sloppy, I know for sure there must be better ways. Self-restraint and self-discipline are virtues while creating software, especially for an “omnipotent” language such as Python.&lt;/p&gt;

&lt;p&gt;Reading New York Times has become a refreshing routine for me on Sundays, particularly everything written by &lt;a href=&quot;https://www.nytimes.com/column/paul-krugman&quot;&gt;Paul Krugman&lt;/a&gt;. The podcast is my second source of getting news as well as practicing critical thinking. The native app on the iPhone is pretty neat. It stops updating a program if I haven’t listened to its several episodes in a row. At the end of the year, I have a crystal picture about which podcasts that I truly enjoy. They are &lt;a href=&quot;https://www.vox.com/the-weeds&quot;&gt;the Weeds&lt;/a&gt;, &lt;a href=&quot;https://www.vox.com/ezra-klein-show-podcast&quot;&gt;the Ezra Klein Show&lt;/a&gt;, &lt;a href=&quot;https://www.nytimes.com/column/the-daily&quot;&gt;the Daily&lt;/a&gt;, &lt;a href=&quot;https://slate.com/podcasts/political-gabfest&quot;&gt;Political Gabfest&lt;/a&gt;, &lt;a href=&quot;https://www.iheart.com/podcast/105-stuff-you-should-know-26940277/&quot;&gt;Stuff You Should Know&lt;/a&gt;, and &lt;a href=&quot;http://rationallyspeakingpodcast.org/&quot;&gt;Rationally Speaking&lt;/a&gt;. At some point during the middle of last year, I stopped listening to most of the shows from NPR. They sounded annoying while covering politics. In most of the cases, the topics were not about partisan talking points when there were truth and lie or even people&apos;s lives on the line. They did not achieve a balanced coverage but did a disservice to the journalism and the society at large by repeating the lies coming from the right.&lt;/p&gt;

&lt;p&gt;In addition, there was also something happened in my life. One of them was completely unplanned. A little hairy potato bumped into my life, whom I named Kylo. I had fantasized to have a dog for about my lifetime… and he just happened to be a perfect match. He was a working dog who was intelligent and willing to be trained. Meanwhile, he did not have a crazy drive like a nut head so we did not have to go out ten times a day just to drain his energy. When I could hardly keep up with him, I’d mock my previous wish of having a Malinois. I enjoyed training with him very much. I only had five to ten minutes in a session and three to five times a day on a weekend. I had to find effective ways to communicate as well as keeping everything interesting and exciting. It was live debugging and he made me trust more on the progressions of every aspect in life. In the past nine months living with him, he had taught me so much about curiosity, trust, and perseverance. On the other hand, it felt like a parenting 101 - I learned to be persistent and resolute on every command, to become multitasking and flexible on schedule, and to keep everything as tidy and clean as I can.&lt;/p&gt;

&lt;p&gt;In the coming year, I hope I can be more self-disciplined and organized, both at work and in life. After all, another life depends on me to survive. What&apos;s more, I wish myself to become more of a craftsman than a hacker - taking time to hone the skills and striving to be better rather than crossing the river by feeling the stones. Hello, a new decade!&lt;/p&gt;

&lt;p&gt;I&apos;d like to finish this post by citing some words from &lt;a href=&quot;https://www.nytimes.com/2018/12/17/science/donald-knuth-computers-algorithms-programming.html&quot;&gt;the Yoda&lt;/a&gt;, Donald Knuth:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We have seen that computer programming is an art, because it applies accumulated knowledge to the world, because it requires skill and ingenuity, and especially because it produces objects of beauty. A programmer who subconsciously views himself as an artist will enjoy what he does and will do it better. Therefore we can be glad that people who lecture at computer conferences speak about the state of the art.&lt;/p&gt;

  &lt;p&gt;My feeling is that when we prepare a program, it can be like composing poetry or music; as Andrei Ershov has said, programming can give us both intellectual and emotional satisfaction, because it is a real achievement to master complexity and to establish a system of consistent rules. Furthermore when we read other people’s programs we can recognize some of them as genuine works of art.&lt;/p&gt;

  &lt;p&gt;It is still a pleasure to do routine jobs if we have beautiful things to work with… Therefore I want to address my closing remarks to the system programmers and the machine designers who produce the systems that the rest of us must work with. Please, give us tools that are a pleasure to use, especially for our routine assignments, instead of providing something we have to fight with.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 30 Dec 2019 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/thoughts/2019/12/30/my-2019/</link>
        <guid isPermaLink="true">http://localhost:4000/thoughts/2019/12/30/my-2019/</guid>
      </item>
    
      <item>
        <title>My 2018 and New Year Resolution</title>
        <description>&lt;p&gt;There are always some reflections at the end of every year. What did I do right? What have I done wrong? How could I correct and improve? However, they came stronger than ever at the beginning of 2018. It was never easy to say goodbyes when colleagues became friends, especially when the &lt;a href=&quot;https://techcrunch.com/2018/01/03/wi-fi-startup-eero-lays-off-30-employees/&quot;&gt;departures were involuntary&lt;/a&gt;. There were shakeups, following by resets and fiercer soul searching. Luckily, at the end of the year, the company is still alive and becomes even stronger. Many of my friends are still here. I am still excited when I get up and go to work every day.&lt;/p&gt;

&lt;p&gt;Using Golang in real-world projects was great. The extremely long “cursing period” reminded me how Python had spoiled me in all these years - I could not remember how many times that I cursed the Golang and asked why on earth certain things had to be in twisted ways. It made me cherish more about the developer-friendly languages and gave me peace of mind by knowing I had a last resort to solve a problem or prototype something quickly. On the other hand, I appreciated why Golang had those “quirky” idioms and that the designers of this language strived to find the tradeoffs between expressiveness and efficiency.&lt;/p&gt;

&lt;p&gt;I was drawn to Golang by the communicating sequential processes, but it went down to my third favorite feature, even though it was arguably the most distinctive feature and did work much better than the asynchronous function calls. The top two features were both about data structure. First, it felt great writing in a language that is free from objects. I was never a big fan of OOP, though ironically I wrote plenty of objects in code on a daily basis. Data and functions should be enough to implement most of the algorithms. Objects were natural to express the design patterns, but they were also too easy to avoid overusing. Second, the interface provided a more rigorous API to a module. It emphasized more on the design patterns. One could still find innovative ways to abuse it, but it was much harder than native objects.&lt;/p&gt;

&lt;p&gt;Migrating to Emacs might be the most far-reaching thing that happened to me this year. It was &lt;a href=&quot;https://wqiong.com/programming/2016/06/26/emacs-progression-path/&quot;&gt;tempting to me before&lt;/a&gt;, but I never made the transition. Two things had played a decisive role - &lt;a href=&quot;http://spacemacs.org&quot;&gt;Spacemace&lt;/a&gt; and &lt;a href=&quot;https://orgmode.org&quot;&gt;Org mode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It started from years-long of searching for the &lt;em&gt;right&lt;/em&gt; application to take notes and to write journals. I was picky about tools. In my opinion, a “usable” note application should have quite a few features, including integration with calendar, flexible formatting (multi-layers sections, itemize, enumerate, fonts like bold, italic, and so forth), links for URLs or other journal entries, plain text (for cross-platforms, version control, exporting to other formats, searching, batching processing, etc.), and a bit user friendly than Latex.&lt;/p&gt;

&lt;p&gt;I felt so happy to find the Org-mode in Emacs eventually. I had been mocking Emacs for years that it was an operating system with a mediocre editor. Now that this operating system had everything I had asked for an even more out of the box (&lt;a href=&quot;https://magit.vc&quot;&gt;built-in Git module&lt;/a&gt;, rendering and &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html&quot;&gt;spell checking&lt;/a&gt; on the fly, &lt;a href=&quot;https://orgmode.org/orgcard.pdf&quot;&gt;numerous useful keybindings&lt;/a&gt;, &lt;a href=&quot;https://orgmode.org/worg/org-contrib/babel/&quot;&gt;running code within a doc&lt;/a&gt;, &lt;a href=&quot;https://orgmode.org/manual/The-spreadsheet.html&quot;&gt;spreadsheet&lt;/a&gt;, &lt;a href=&quot;https://orgmode.org/worg/org-tutorials/non-beamer-presentations.html&quot;&gt;slides&lt;/a&gt;, and so forth), I had eggs on my face. Need a web portal? Both Github and Gitlab had supported rendering the Org-mode in their repositories. As a result, it was possible to view the files in almost all devices that had shell and web browser. It was the &lt;em&gt;genuine&lt;/em&gt; Cross-platform. Better still, I had a few colleagues whose go-to editor was the Emacs, so that I could have my weird questions answered in almost real-time. Their help made the transition much smoother.&lt;/p&gt;

&lt;p&gt;At the beginning of 2018, I undertook a five-months cut and workout and lost 15 pounds. It was not dramatic but did give me a chance to push myself to do more exercise and eat healthier. I also took a couple of months of training in CrossFit. Though I still don’t get the point of why people would count the reps of a workout in a stadium for competition, most of the movements are very useful to build a stronger body. It helps me find many overlooked muscle groups, which in turn gives me more boost and protection while playing tennis.&lt;/p&gt;

&lt;p&gt;One thing that I’m proud of myself the most in 2018 is to resume reading on a daily basis. I’ve finished 15 books, including some textbooks of computer science, biographies about Steve Jobs, Phil Night, and Tom Brady, non-fiction about Oakland Athletics, Obama administration, Pixar, homo sapience, and the process of thinking, and some other goofy stuff such as the book &lt;em&gt;What if&lt;/em&gt;. The reading itself calms me down in the environment full of distracting and fragmented information. More importantly, it magically converts my long and mundane morning commute into an exciting journey of the mind. I either learned something new or was merely amused by the experiences of other lives.&lt;/p&gt;

&lt;p&gt;In the coming year, I hope my reading schedule can be &lt;em&gt;more structured&lt;/em&gt;, especially before going to sleep and during the weekends. The selection of contents should also be more systematic. There are two directions to learn in general - the algorithm and the system. More often than not, I struggle to find a balance and end up wasting time without satisfactory results. I enjoy more while learning math and formal methods. They are challenging and exciting. One of the examples of the latter ones is the Linux kernel. The learning curve is steeper due to the system itself. It is immense and intricate. Hopefully, I can &lt;em&gt;finish&lt;/em&gt; equal amount of books for both directions. Sometimes, it is more tempting to keep Netflix rolling especially after a day of exhausting work, but what my mind needs might be a stretching rather than resting. Also, I’d like to try more fictions. I’ve started &lt;em&gt;A Song of Ice and Fire&lt;/em&gt; but never finished. In this case, it is easier to objectively criticize some lifeless theories than emotionally involved with a virtual character. At the end of the year, I’d be very happy if I finish the first two volumes of &lt;em&gt;The Art of Computer Programming&lt;/em&gt;, along with &lt;em&gt;A Game of Thrones&lt;/em&gt; and &lt;em&gt;A Clash of Kings&lt;/em&gt; :) I’m sure I can find time to squeeze in some pointless bestsellers of the New York Times.&lt;/p&gt;

&lt;p&gt;In 2019, there will be more uncertainties both at work and in my life. Many of them are out of my control. I wish I could find a solution for most of whatever comes along the way. More importantly, I can put the things that I’ve learned in 2018 and the past to use to become a bit stronger and wiser.&lt;/p&gt;

&lt;p&gt;Stephen King tries to &lt;a href=&quot;https://youtu.be/xR7XMkjDGw0&quot;&gt;write six pages per day&lt;/a&gt; so that he has a rough estimate that a 360-page book is about two months worth of work. Assuming reading is about ten times easier than writing, plus all of the “more important” things in life, I should be able to read 20 to 60 pages a day, depending on which device and which font size of the book. The well-known bestseller author admitted that he was extremely fortunate and did not understand what he was doing. Nevertheless, he still set up a goal and achieved it on a daily basis. I should be able to do the same thing - estimate the workload, set up a viable plan, and stick to it.&lt;/p&gt;

&lt;p&gt;Finishing this post with some inspiring words from &lt;a href=&quot;http://secretsofconsulting.blogspot.com/2017/10/where-do-old-programmers-go.html&quot;&gt;Gerald M. Weinberg&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re good, you can do any of these things even at an advanced age, but you can’t just sit around waiting for someone to find you.  If you’re not good, then either get good (it’s never too late) or retire. We don’t need mediocre programmers, and we never did.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 29 Dec 2018 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/thoughts/2018/12/29/my-2018/</link>
        <guid isPermaLink="true">http://localhost:4000/thoughts/2018/12/29/my-2018/</guid>
      </item>
    
      <item>
        <title>Farewell, 2016</title>
        <description>&lt;p&gt;This is an enjoyable year. Working gradually goes into the fast track. It is nicer to be around with awesome people and to have made quite a few good friends. It becomes easy for me to either find someone playing tennis in the early morning, or grabbing a drink in the late night, or both:)&lt;/p&gt;

&lt;p&gt;There are three more friends who became my ex-coworkers. I felt sad every time when someone left. The bad start came from GC one year ago – “hi Q, can I talk to you in private…. I think it is better to come from me than hearing from…”… I could not say anything but to hug that guy – and similar conversations happened three times (!!) this year. I love the people that I’m working with, but hate the feeling of seeing their left. It is not really ok though I’ve gone through it multiple times. Well… on the bright side, I have several more friends  outside of the office, whom I can occasionally catch up with, and talk about something other than work.&lt;/p&gt;

&lt;p&gt;It is very nice to have Donny, my coach, and Sean to play tennis with me. I basically take a lesson with Donny every other week. We’ve only been able to work on two aspects during the whole year: my forehand and backhand ground stroke. I still remember my 1st lesson with him. After hitting for about fifteen minutes, I asked him “how can I improve, coach?” He just smiled a lot and tried to sort out hundreds of answers in his head, “let’s just work from the very basic ones”. It was a long and struggling process to remove all unnecessary movements. Now my forehand is more consistent, and I am able to put much more force on each stroke and also maintain at my highest level for a much longer time. But my backhand is still half-baked… It is on and off even within a set.&lt;/p&gt;

&lt;p&gt;Sean is a wonderful person. We’ve played 30+ times this year, and I won once (or twice?)…=P I’m very grateful that he is still willing to play with me. More importantly, my other tennis matchups might either show up late on the court or have a negative attitude now and then, since the match doesn’t matter at all. But Sean always arrives on time and tries his hardest to save every single shot and to win a point. I enjoy very much the competitive attitude he brings to the court.&lt;/p&gt;

&lt;p&gt;Programming, as my biggest hobby, is hard to separate from my work. Besides, I agree with the assertion that one should &lt;a href=&quot;https://medium.com/@nxpatel/treat-yourself-like-a-startup-or-a-microbe-if-you-prefer-1074d9e18397#.m89g9s4n6&quot;&gt;treat self like a startup&lt;/a&gt;. And there is no better place to learn all relevant skills than actually &lt;em&gt;programming&lt;/em&gt; in &lt;a href=&quot;https://eero.com&quot;&gt;a rising startup&lt;/a&gt; =P. I put these two together. Here are several things that I’ve learned during the past year.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Communication is vital, for both working individually and working in a team. There are three parts for one successful communication.
    &lt;ul&gt;
      &lt;li&gt;Do the homework beforehand, to make clear the real target, possible conflict interests, who should be involved in the conversation and when, and etc.. &lt;em&gt;Tech spec&lt;/em&gt; is an excellent way to arrange all thoughts, and to work as a checklist to make sure there is nothing major left behind.&lt;/li&gt;
      &lt;li&gt;In order to be persuasive, it’d better to make all requests prioritized. There is normally one main goal to shoot at, but it is also great to take all the concerns and suggestions and put them into the backlog. &lt;em&gt;We don’t know what we don’t know&lt;/em&gt;. This is the most dangerous thing that could happen in a project.&lt;/li&gt;
      &lt;li&gt;Followups. No matter how hard the nature of a problem is, it can be divided into small fractions of actionable items, which are the smaller the better. The deliverables are the consequence of the actionable items. There is not at all valid estimations for either time or workload until there are tiny pieces of deliverables.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;De-risk a project as early as possible. &lt;em&gt;It is much easier said than done&lt;/em&gt; since every single project is novel and unique. In general, there should be sufficient time beforehand to research, lay out the strategic blueprint as early and detailed as possible, and to make it reach broad audiences. Meanwhile, it is always better to split one project into small pieces so that they can be delivered incrementally and to take rigorous validation in every iteration to decide if we are using the right approach to solve a problem that is worth working on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Retrospective. It is similar to the post-mortem but on a smaller scale. I don’t like it because by the time I have such a thing in my calendar it means something &lt;em&gt;has gone&lt;/em&gt; wrong. On the other hand, however, it is a good place to collect the afterthoughts: what happened, why this happened, and &lt;em&gt;more importantly&lt;/em&gt; what can be done to prevent it from happening again.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;To debug some obscure issues, especially for those that are time dependent or happen in a probabilistic manner. The best way is to &lt;a href=&quot;http://foldoc.org/use%20the%20source%20luke&quot;&gt;use the source &lt;em&gt;code&lt;/em&gt;&lt;/a&gt;. This is the only way that has never failed. Documents get out of sync; comments might lie, and colleagues’ memory might not be reliable. The source is &lt;em&gt;eternal&lt;/em&gt;. The best way to find out what the code does is
    &lt;ul&gt;
      &lt;li&gt;Understand what it is trying to do&lt;/li&gt;
      &lt;li&gt;Understand what the implementation &lt;em&gt;should&lt;/em&gt; do&lt;/li&gt;
      &lt;li&gt;Test this understanding with test code&lt;/li&gt;
      &lt;li&gt;Repeat the three steps above as many time as needed…&lt;/li&gt;
      &lt;li&gt;As a last resort, if nothing is making sense, fire up the debugger &lt;em&gt;on the right piece of code&lt;/em&gt;, which can  be only achieved if the underneath mechanism is &lt;em&gt;actually&lt;/em&gt; understood, and see what you have misunderstood.&lt;/li&gt;
      &lt;li&gt;See if the compiler is lying …&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Keep learning and keep an open mind. An incomplete list of what I’ve dabbled in during the past year includes the network structure of the internet service providers, &lt;a href=&quot;https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented-ebook/dp/B000SEIBB8&quot;&gt;design patterns&lt;/a&gt;, &lt;a href=&quot;http://shop.oreilly.com/product/0636920026938.do&quot;&gt;D3 and Javascript&lt;/a&gt;, &lt;a href=&quot;https://github.com/krispo/awesome-haskell&quot;&gt;the mighty and awesome Haskell&lt;/a&gt;, a little bit &lt;a href=&quot;http://julialang.org&quot;&gt;Julia&lt;/a&gt;, and the enjoyable &lt;a href=&quot;https://www.topcoder.com&quot;&gt;competitive programming&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Resolution in 2017&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Launch a project written in Haskell&lt;/li&gt;
  &lt;li&gt;Win some more money from Topcoder (:&lt;/li&gt;
  &lt;li&gt;Read at least one research paper (in  &lt;em&gt;any&lt;/em&gt; topic) per week&lt;/li&gt;
  &lt;li&gt;Read three books in computer science&lt;/li&gt;
  &lt;li&gt;Better at backhand and serves&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 24 Dec 2016 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/thoughts/2016/12/24/farewell-2016/</link>
        <guid isPermaLink="true">http://localhost:4000/thoughts/2016/12/24/farewell-2016/</guid>
      </item>
    
      <item>
        <title>Emacs Progression Path</title>
        <description>&lt;p&gt;[&lt;em&gt;Update&lt;/em&gt;] This post was originally wrote two years ago. Since then, I have
gradually moved most of my &lt;em&gt;personal&lt;/em&gt; developing environment from Vim
to Emacs. It is the time to rewrite part of it and add the updates.&lt;/p&gt;

&lt;p&gt;I was hoping to find something like &lt;a href=&quot;http://stackoverflow.com/questions/2573135/python-progression-path-from-apprentice-to-guru&quot;&gt;Python Progression Path&lt;/a&gt; or sort of “best practice” for Emacs, because the difference between Vim and Emacs was much larger than I thought. But what I found were either teaching about basic operations such as saving and quiting the editor for people who had access to comupter for the 1st time, or talking about tricks of using Emacs Lisp for the high-end hard-core players… It seemed like I was stuck in the middle, and would stay there for a very long time…&lt;/p&gt;

&lt;p&gt;I will sort the contents here as incremental records simulating my Emacs learning process, as well as keeping track of nontrivial materials and thoughts.&lt;/p&gt;

&lt;h3 id=&quot;mindset-and-starting-point&quot;&gt;Mindset and Starting Point&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t panic – &lt;em&gt;The Hitchhiker’s Guide to the Galaxy&lt;/em&gt; – “it looked insanely complicated , and this was one of the reasons… the other reason was that this device was in fact that most remarkable of all…”&lt;/li&gt;
  &lt;li&gt;To customized the emacs, the starting point is the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.emacs.d/init.el&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;One basic
&lt;a href=&quot;http://refcards.com/docs/gildeas/gnu-emacs/emacs-refcard-a4.pdf&quot;&gt;cheat sheet&lt;/a&gt;
comes in handy. Most of the common keybindings can be easily referred.&lt;/li&gt;
  &lt;li&gt;It’s also much easier to start with a package containing all basic
modules. There are several options, which are listed in the
following section.&lt;/li&gt;
  &lt;li&gt;To install new package, the easiest way is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M-x package-install&lt;/code&gt;,
and the following operations are similar to surfing the website via
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lynx&lt;/code&gt;. It is even easier to update all installed package: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M-x
list-packages&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U&lt;/code&gt; (Mark all package with a newer available
version), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; (Download and install all marked packages). More
info refers to the
&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Menu.html&quot;&gt;Package Menu Buffer&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Though I don’t agree with many opinions that
&lt;a href=&quot;https://en.wikipedia.org/wiki/Steve_Yegge&quot;&gt;Steve Yegge&lt;/a&gt; have said,
but his claim about Emacs is somewhat correct – “Real engineers use
Emacs. You have to be way smart to use it well, and it makes you
incredibly powerful if you can master it” – the emacs is highly
configurable and can be very powerful, but the user has to be
smart simply because the system is so twisted…&lt;/li&gt;
  &lt;li&gt;It’s helpful to know some LISP, for both using Emacs and becoming a
better programmer.&lt;/li&gt;
  &lt;li&gt;An off-topic thought. I also agree
with Steve’s view about
&lt;a href=&quot;https://sites.google.com/site/steveyegge2/tour-de-babel&quot;&gt;languages&lt;/a&gt;,
especially – “C++ is dumb, and you can’t write smart systems in a
dumb language. Languages shape the world. Dumb languages make for
dumb worlds.”  =P&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;packages&quot;&gt;Packages&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://batsov.com/prelude/&quot;&gt;Prelude&lt;/a&gt; – very easy to setup, and
add/disable modules and/or modes, which are defined at
&lt;a href=&quot;https://github.com/creasyw/dot_file/blob/master/init.el&quot;&gt;init.el&lt;/a&gt;
and &lt;a href=&quot;https://github.com/creasyw/dot_file/blob/master/prelude-modules.el&quot;&gt;prelude-modules.el&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xiaohanyu/oh-my-emacs&quot;&gt;Oh-my-emacs&lt;/a&gt; is an
alternative, but I met quite a few
incompatible issues for the OSX. &lt;a href=&quot;https://github.com/eschulte/emacs24-starter-kit&quot;&gt;Emacs24 Starter Kit&lt;/a&gt;
is also well-known but not actively developed recently.&lt;/li&gt;
  &lt;li&gt;Emacs is able to do &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html&quot;&gt;spelling check&lt;/a&gt; natively, or with more advanced &lt;a href=&quot;https://www.emacswiki.org/emacs/FlySpell&quot;&gt;Fly Spell&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.emacswiki.org/emacs/Evil&quot;&gt;Evil&lt;/a&gt;, the Vim mode. This makes my live much easier, maybe just because it provides a decent editor inside of
the emacs OS =P. And, there is a trick to
&lt;a href=&quot;http://stackoverflow.com/questions/3960034/pasting-text-into-emacs-on-macintosh&quot;&gt;copy and paste large chunks of text in OSX&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_mono/eww.html&quot;&gt;EWW&lt;/a&gt;:
the web browser within emacs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/magit/magit&quot;&gt;Magit&lt;/a&gt;. “Magit is the most popular interface to git. If you are new to git and do not need support for other vcs this is likely the package you should try first” – quoted from &lt;a href=&quot;http://www.emacswiki.org/emacs/Git&quot;&gt;EmacsWiki&lt;/a&gt;. The detail explanation can be found from &lt;a href=&quot;http://www.masteringemacs.org/articles/2013/12/06/introduction-magit-emacs-mode-git/&quot;&gt;Mastering Emacs&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Auto-completion is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M-/&lt;/code&gt;, or
&lt;a href=&quot;http://company-mode.github.io/&quot;&gt;Company&lt;/a&gt; for fancier scenarios.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.emacswiki.org/emacs/HighlightSymbol&quot;&gt;HighlightSymbol&lt;/a&gt;
  with self-explanatory name, but does not work well within
  Prelude.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://haskell.github.io/haskell-mode/&quot;&gt;Haskell mode&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jblevins.org/projects/markdown-mode/&quot;&gt;Markdown mode&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.nongnu.org/geiser/geiser_3.html&quot;&gt;Geisier&lt;/a&gt; is able to integrate with Racket REPL, and use together with &lt;a href=&quot;http://www.neilvandyke.org/quack/&quot;&gt;Quack&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Alternatively, there is a &lt;a href=&quot;https://github.com/greghendershott/racket-mode&quot;&gt;Racket mode&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;These two great post are the starting point to enter the
world of Emacs &lt;a href=&quot;http://sachachua.com/blog/2013/05/how-to-learn-emacs-a-hand-drawn-one-pager-for-beginners/&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;http://sachachua.com/p/26006&quot;&gt;2&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;To switch between different modes, it might be helpful to open quite a few cheat
sheets at the same time…
    &lt;ul&gt;
      &lt;li&gt;Emacs: (&lt;a href=&quot;http://refcards.com/docs/gildeas/gnu-emacs/emacs-refcard-a4.pdf&quot;&gt;compact version&lt;/a&gt;, and &lt;a href=&quot;http://cs.iupui.edu/~kweimer/EmacsCheatSheet.pdf&quot;&gt;a more user friendly verion&lt;/a&gt;).&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://g-design.net/textmate.pdf&quot;&gt;Prelude&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://magit.vc/manual/magit-refcard.pdf&quot;&gt;Magit&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.nongnu.org/geiser/geiser_5.html&quot;&gt;Geiser&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GNU &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/index.html&quot;&gt;Emacs Manual&lt;/a&gt; and &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/elisp/&quot;&gt;Emacs LISP Manual&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://batsov.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly/&quot;&gt;Guidelines&lt;/a&gt; for package management in Emacs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.emacswiki.org/emacs/&quot;&gt;Emacs Wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.masteringemacs.org/&quot;&gt;Mastering Emacs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/&quot;&gt;From Vim to Emacs+Evil chaotic migration guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Steve Yegge’s suggestion for &lt;a href=&quot;https://sites.google.com/site/steveyegge2/effective-emacs&quot;&gt;improving productivity with Emacs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;My previous &lt;a href=&quot;http://wqiong.com/blog/2013/07/01/setup-emacs-in-mac-os/&quot;&gt;post&lt;/a&gt; to setup Emacs in Mac OS.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://piotrkazmierczak.com/2010/emacs-as-the-ultimate-latex-editor/&quot;&gt;How to turn Emacs to the ultimate Latex Editor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;misc&quot;&gt;Misc&lt;/h3&gt;

&lt;p&gt;The difference between “killing” and “deleting” is that “killed” text can be reinserted (at any position), whereas “deleted” things cannot be reinserted in this way (you can, however, undo a deletion–see below).  Reinsertion of killed text is called “yanking”.  Generally, the commands that can remove a lot of text kill the text (they are set up so that you can yank the text), while the commands that remove just one character, or only remove blank lines and spaces, do deletion (so you cannot yank that text).  &amp;lt;DEL&amp;gt; and C-d do deletion in the simplest case, with no argument.  When given an argument, they kill instead.
– This is valid for both vim and emacs.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Multiple windows:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-x 0&lt;/code&gt;  delete this window&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-x 1&lt;/code&gt;  delete all other windows&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-x 2&lt;/code&gt;  vertically split window&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-x 3&lt;/code&gt;  split window side by side&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Scoll down the page
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-v&lt;/code&gt;: page down&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-u 8 C-v&lt;/code&gt;: scoll down 8 lines&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-l&lt;/code&gt;: move the current line to the middle of the window&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-u 0 C-l&lt;/code&gt;: move the current line to the head of the window&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Getting help
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-h c \&amp;lt;Command sequence\&amp;gt;&lt;/code&gt;:   a very brief description of the command.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-h k \&amp;lt;Command sequence\&amp;gt;&lt;/code&gt;   displays the documentation of the function, as well as its name&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-h t&lt;/code&gt; evoke the tutorial of Emacs within the editor.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-h a topics RET&lt;/code&gt; searches for commands whose names match the
  argument topics. The argument can be a keyword, a list of keywords,
  or a regular expression.
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-h i d m emacs RET i topic RET&lt;/code&gt; searches for topic in the
  indices of the Emacs Info manual&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-h i d m emacs RET s topic RET&lt;/code&gt; searches the text of the
  manual.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Shell History (also Useful for Haskell REPL)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M-p (or) C-\&amp;lt;UP\&amp;gt;&lt;/code&gt;: Fetch the next earlier old shell command.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M-n (or) C-\&amp;lt;DOWN\&amp;gt;&lt;/code&gt;: Fetch the next later old shell command.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M-r&lt;/code&gt;: Begin an incremental regexp search of old shell commands.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-c C-x&lt;/code&gt;: Fetch the next subsequent command from the history.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-c .&lt;/code&gt;: Fetch one argument from an old shell command.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C-c C-l&lt;/code&gt;: Display the buffer’s history of shell commands in another window (comint-dynamic-list-input-ring).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 26 Jun 2016 16:37:00 -0700</pubDate>
        <link>http://localhost:4000/programming/2016/06/26/emacs-progression-path/</link>
        <guid isPermaLink="true">http://localhost:4000/programming/2016/06/26/emacs-progression-path/</guid>
      </item>
    
      <item>
        <title>Tennis Progress of the Past Three Months</title>
        <description>&lt;p&gt;&lt;strong&gt;Matches&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the best things happened in the past two months was that I found three (and hopefully four) guys who were able to play against me in the mornings. Two of them played definitely much better than me, but I can still manage to put up a fight. The mindset of playing against someone who is better is actually much simpler — just try best to win every single point. I should bring this attitude to all my matches.&lt;/p&gt;

&lt;p&gt;My current game plan is to hit as many cross-court hits as possible, though down-to-the-line is so attractive. The latter one is so hard to control that it should be something that I can improve in the future but not right now. My current goals are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Decrease the number of unforced errors&lt;/li&gt;
  &lt;li&gt;Have more directional control while driving the returns as deep as I can&lt;/li&gt;
  &lt;li&gt;Have more  consistent servings&lt;/li&gt;
  &lt;li&gt;Have fun:)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Lesson with Donny&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For both forehand and backhand:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;There are four steps: 1) place the racket (in front of the body) and turn the racket face, 2) prepare the racket and turn the body, 3) build the force while driving the racket from behind the body to the point before acceleration, 4) keep the racket face closed, and accelerate to the hitting point.&lt;/li&gt;
  &lt;li&gt;The wrist should be relax from the beginning to the end, and accelerate right below the touching point.&lt;/li&gt;
  &lt;li&gt;The drive-through is “hitting and &lt;em&gt;then&lt;/em&gt; extending”, not “extending and hitting”. Then, let the force residual finish the rest of the movement.&lt;/li&gt;
  &lt;li&gt;For the four steps above, the tempo is not just the fourth step, but for all four steps. My &lt;em&gt;incorrect&lt;/em&gt; habit is to start early but stop in the step 2, then I would rush the 3rd step quite often. The &lt;em&gt;correct way&lt;/em&gt; is to use prediction and positioning to get to the right place, and wait from the 1st step. &lt;em&gt;It is really important to build the correct tempo from 1 to 4&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;The hardest part to take the four steps into action comes as adjusting the starting point according to different players — some of them have strong spins, while others might hit the ball fast and flat. Well, the timing is a big problem for me anyway. I struggle between under-reach and over-reach all the time&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Especially for the backhand:&lt;/p&gt;

&lt;p&gt;It is correct to turn the body in the 2nd step. But there is a &lt;em&gt;hip lock&lt;/em&gt; in the 3rd step, so that the core is more stable as the wrist pushes force to hit the ball. Then, it is similar to the forehand — drive towards the direction of the destination, and the hip is actually turned by involuntarily followup just as the racket ends up at the upper right as the consequence of the hit-and-drive.&lt;/p&gt;

&lt;p&gt;As following the rules above, I’m able to provide more elevation on the returns. The current hardest part is still the control of the tempo — I don’t want to rush it, as well as stuck it in one step longer than the others’.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you, Bob!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Though it might be more beneficial to refine my techniques with Donny, I still miss my former coach:) It is enjoyable to hear the analogy between a tennis match and a chess game.&lt;/p&gt;

&lt;p&gt;Maybe it relates with where I was standing, Bob put more emphasis on the general picture as well as foot works of a tennis match. He helped me understand that the tennis is about mental and psychological challenges as well as a physical competition. I appreciate it more as I play more games. It would be nice if I could have another chance to take some lessons from him.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Jun 2016 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/tennis/2016/06/08/tennis-progress-in-the-first-half-2016/</link>
        <guid isPermaLink="true">http://localhost:4000/tennis/2016/06/08/tennis-progress-in-the-first-half-2016/</guid>
      </item>
    
      <item>
        <title>Tennis Progress in February 2016</title>
        <description>&lt;p&gt;Lessons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;My racket always &lt;em&gt;wrongly&lt;/em&gt; tries to be at the line (or on the top of the ball) before it arrives at the touching point. On the contrary, when I drop the head of the racket, it should be &lt;em&gt;&lt;strong&gt;behind and beneath&lt;/strong&gt; the touching point&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Timing is the aspect that should be able to get better by practice. I &lt;em&gt;almost&lt;/em&gt; always &lt;em&gt;too hurry&lt;/em&gt; to swing the racket, so the hitting point is usually at the top half of the ball. To compensate this effect, I also make the face of the racket &lt;em&gt;too open&lt;/em&gt;. The correct way is to &lt;em&gt;wait a little bit longer at the very first preparation&lt;/em&gt;, and then &lt;em&gt;let the upper rim lead the racket all the way through the touching point&lt;/em&gt; until &lt;em&gt;the racket &lt;strong&gt;brushes&lt;/strong&gt; the middle of the ball&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Let the extension be the consequence of the hit&lt;/em&gt;, but not the other way around.&lt;/li&gt;
  &lt;li&gt;I &lt;em&gt;mistakenly&lt;/em&gt; invert the wrist control between ground stroke and serving. The former movement requires the wrist to be tight especially when it turns the racket from 4- to 9-o’clock position. The latter one needs wrist to be as relax as possible, so that the racket is able to hit the top of the ball as high and hard as possible.&lt;/li&gt;
  &lt;li&gt;For serving, I should hit &lt;em&gt;higher&lt;/em&gt; than what I used to, as well as toss the ball a little bit higher. The right way is not necessary comfortable, but would be definitely felt different.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Matches:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Too many double faults!&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 07 Feb 2016 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/tennis/2016/02/07/tennis-progress-in-february-2016/</link>
        <guid isPermaLink="true">http://localhost:4000/tennis/2016/02/07/tennis-progress-in-february-2016/</guid>
      </item>
    
      <item>
        <title>Tennis Progress in January 2016</title>
        <description>&lt;p&gt;There is not too much to write about this month concerning the progress of tennis – did not play enough games, played more as double at challenge court than as single, lost more than wining. It seems like my tennis lesson gave me quite a few useful advices but destroyed my former routines without completing building newer ones. The stability, depth, and directional control of ground strokes deteriorated in different degrees. Here are some advices from my 2nd lesson –&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;As the main points stated in the last lesson, the racket &lt;em&gt;only has &lt;strong&gt;a very small&lt;/strong&gt; window to accelerate itself&lt;/em&gt;. If it is accelerated earlier, it is more likely that I would hit the upper side of the ball, which would in turn make the ball travel shorter.
    &lt;ul&gt;
      &lt;li&gt;After building the weight at the head of racket, the face of racket is parallel to the grip when it begins to accelerate, rather than still behind the grip.&lt;/li&gt;
      &lt;li&gt;ALWAYS let the upper side of racket lead the way, or the return would fly high…&lt;/li&gt;
      &lt;li&gt;The difference between “right” and “wrong” is only two inches apart.&lt;/li&gt;
      &lt;li&gt;Be patient. Let the match (tennis ball) come to me, rather than pushing forward. Although the window is small, pushing it would not make it easier and better.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The follow-through is a natural gesture after &lt;em&gt;the racket is thrown &lt;strong&gt;forward&lt;/strong&gt;&lt;/em&gt;, but not a must to complete using force. That is, I should focus more on driving the return forward using the head of the racket, and then &lt;em&gt;let&lt;/em&gt; it going back. It is incorrect to push it from the touching point to the end point.&lt;/li&gt;
  &lt;li&gt;I still use more shoulder and body movements than necessary. It would make me easier to feel tired. The only part that is working is the forearm, while the rest of the body including the grip should be as relax as possible.&lt;/li&gt;
  &lt;li&gt;The relax of the wrist will also help me quite a bit for the serving. Currently, the racket face is always behind the wrist when it get contact with the ball. As a result, I push the ball rather than smashing it, which is wrong. The contact point &lt;em&gt;should&lt;/em&gt; be as high as possible. The racket &lt;em&gt;should&lt;/em&gt; be vertical to the ground, or leaning forward a little bit, so that there is a larger window and more force to put on the serving.&lt;/li&gt;
  &lt;li&gt;Returning a fast ball does not mean I also need a full or even larger swing. On the contrary, I only need to retain the tempo and keep the touching point and the racket face right. A fast ball would have a fast return all by itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep going.&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Jan 2016 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/tennis/2016/01/30/tennis-progress-in-january-2016/</link>
        <guid isPermaLink="true">http://localhost:4000/tennis/2016/01/30/tennis-progress-in-january-2016/</guid>
      </item>
    
      <item>
        <title>Ground Strokes with More Movements of Wrists</title>
        <description>&lt;p&gt;I’m really glad that I am able to resume playing tennis, and finally (yes!) find an excellent pro to work with.&lt;/p&gt;

&lt;p&gt;Based on the first lesson, Donny, my new coach, is not like Bob, who would regard the tennis as much of a chess game and teach me to think through every movement, which I like a lot. On the other hand, he can provide quite a few fresh opinions and may be able to bring me a even higher level.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The movements of the wrists would make full use of the racket weight
    &lt;ul&gt;
      &lt;li&gt;Starting from the back, use the grip to lead the racket, but push it in a relatively slow speed.&lt;/li&gt;
      &lt;li&gt;Use the upper edge rather than lower edge to lead the racket, so that the return will not fly too high&lt;/li&gt;
      &lt;li&gt;Drop the head of the racket during the movement above, pointing to about 4 o’clock.&lt;/li&gt;
      &lt;li&gt;Accelerate the movement right before the contacting points, brushing from 4 to 12.&lt;/li&gt;
      &lt;li&gt;Continue pushing the racket and complete the follow through&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The rest of the body should be relatively relax during this process&lt;/li&gt;
  &lt;li&gt;The left hand should do exactly the same thing for the backhand strokes&lt;/li&gt;
  &lt;li&gt;It should provide faster and more stable strokes, and maybe even shed some lights on the serving&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 23 Dec 2015 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/tennis/2015/12/23/groud-stroke-with-more-wrist-movement/</link>
        <guid isPermaLink="true">http://localhost:4000/tennis/2015/12/23/groud-stroke-with-more-wrist-movement/</guid>
      </item>
    
      <item>
        <title>My 2015 and New Year Resolution</title>
        <description>&lt;p&gt;早晨时候还在感叹生活的奇妙，当真如Harry Potter里面的Every Flavor Beans，不知道接下来会是什么味道。13年的圣诞，和几个同学在新奥尔良，白天去种植园参观，晚上自己在酒店大堂里蹭免费的wifi，写代码。14年此时，已经回到了两年未归的家中，买了一个月的曲径代理（那个现在已经消失了的翻墙利器），重读算法导论，想着即将而来的毕业求职，满是忐忑。今年此时，我已经入职eero十个月有余，作为第16号员工，看着同事们来来去去，公司发展到100余人，搬了两次办公地点。而自己，战战兢兢的毕业了，战战兢兢的过了实习期成了正式员工，战战兢兢的写着代码，做着仿真、测试，也已经逐渐驾轻就熟了。&lt;/p&gt;

&lt;p&gt;这一年最主要的成果就是找到了现在的工作。知道了真正的创业企业应该是个什么样子。这里所谓真正，是因为在身边以及网络里，太多人口中的创业，其实就是做做小本生意，或是投机些概念。在eero，所有人都在尝试着解决实际中存在的问题，忙碌而充实。三个合伙人，总是最早到公司，最晚离开，他们自己的企业，的确是在尽心尽力的经营。而作为一个企业，在团队建设，企业间合作，后勤和法律保障，都有专人在维护。具体到工程开发，每天一次到两次的stand up，随时的三五人小会，时不时的shedule push，不同组之间相互的协调，都是能够按期完成任务的关键。&lt;/p&gt;

&lt;p&gt;总会感慨自己幸运，可以和身边这些优秀的人一起工作。很多时候，站在他们身后，观看他们工作都能学到很多东西。和在实验室里一样，我还是主要使用Python，但用了很多“高端”的库。不会再因为看到莫名其妙的报错而烦躁，会知道去哪里找文档，去程序库的源码里找答案；涉及了修改Linux kernel的WiFi驱动，阅读了大量的C++源码；尝试了几次cross compiling；修改了若干开源软件的默认行为，来适配路由器操作系统的要求；不断调整自己的工作节奏，不断寻找合适的工具进行开发、调试、沟通、以及记录进度。&lt;/p&gt;

&lt;p&gt;这一年的另一大收获，是有声电子书。上下班途中无聊，无论是自己开车还是坐公交，有声书都是个不错的陪伴。听完了 The Hunger Games 三部曲，好喜欢Katniss。老夫聊发少年狂，听完了七本Harry Potter，迷上了里面的魔法世界。还听了好几本Steve Levy的畅销书。加上看的几本专业书。一年下来，总共完成了17本书。考虑到听书比看书要省时省力很多，我真不知道一个有全职工作的人怎么能&lt;a href=&quot;https://www.facebook.com/ayearofbooks/&quot;&gt;每两周读一本书&lt;/a&gt;..&lt;/p&gt;

&lt;p&gt;还有两件事情。第一次经历公司有人被开除，以及GianCarlo同学离职。对于前者，干不好走人是理所应当的，只是那种肃杀的气氛让人心有余悸。而GC是我刚来公司时候对我最友好的几个人之一，经过一段时间的相处，更是欣赏他的为人和才华。很难猜测他离职的真正原因，只是祝福他以后也能一帆风顺，完成自己的梦想。同时，也又一次说明这铁打的营盘流水的兵。总是需要不断学习提高自己的。不进则退。有了更多的筹码，才能打出更好的牌。&lt;/p&gt;

&lt;p&gt;为了避免以后的拖沓，尽管很尴尬，还是总结一下去年此时写下的决心完成了多少吧……&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;更好的把握自己的时间 （部分完成，时好时坏……）&lt;/li&gt;
  &lt;li&gt;顺利毕业 （完成）&lt;/li&gt;
  &lt;li&gt;坚持锻炼和网球 （中间停顿了将近半年，和搬家、毕业、事情多，以及自己的懒惰都有关系）&lt;/li&gt;
  &lt;li&gt;累积2000小时的编程 （积累了1695个小时，到8915了。我应该更频繁的记录一下）&lt;/li&gt;
  &lt;li&gt;精通Clojure，Javascript，Obj-C/Swift中的两门语言 （完全没做）&lt;/li&gt;
  &lt;li&gt;“看完”三到四本经典教材 （完全没做）&lt;/li&gt;
  &lt;li&gt;完成Trello里有关找工作的所有准备工作 （完成）&lt;/li&gt;
  &lt;li&gt;找到一份自己喜爱的工作 （完成）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;来年对自己的要求：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;更好的自律，更好把握自己的时间&lt;/li&gt;
  &lt;li&gt;坚持锻炼和网球&lt;/li&gt;
  &lt;li&gt;学习 Javascript (D3)、Lua、和 Julia&lt;/li&gt;
  &lt;li&gt;累积2000小时的编程&lt;/li&gt;
  &lt;li&gt;坚持每周阅读学术论文，做笔记&lt;/li&gt;
  &lt;li&gt;学习两门课程&lt;/li&gt;
  &lt;li&gt;更多和别人交流，不要封闭自己&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 21 Dec 2015 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/thoughts/2015/12/21/new-year-resolution/</link>
        <guid isPermaLink="true">http://localhost:4000/thoughts/2015/12/21/new-year-resolution/</guid>
      </item>
    
      <item>
        <title>Longest Palindromic Substring</title>
        <description>&lt;p&gt;Reference:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Longest_palindromic_substring&quot;&gt;Problem Introduction @ Wikipedia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://leetcode.com/2011/11/longest-palindromic-substring-part-ii.html&quot;&gt;General Algorithm with Explanation @ Leetcode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/longest-palindrome-substring-set-1/&quot;&gt;Brutal Force @ GeeksforGeeks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/longest-palindromic-substring-set-2/&quot;&gt;Dynamic Programming @ GeeksforGeeks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Manacher’s Algorithm @ GeeksforGeeks (Part &lt;a href=&quot;http://www.geeksforgeeks.org/manachers-algorithm-linear-time-longest-palindromic-substring-part-1/&quot;&gt;I&lt;/a&gt;, &lt;a href=&quot;http://www.geeksforgeeks.org/manachers-algorithm-linear-time-longest-palindromic-substring-part-2/&quot;&gt;II&lt;/a&gt;, &lt;a href=&quot;http://www.geeksforgeeks.org/manachers-algorithm-linear-time-longest-palindromic-substring-part-3-2/&quot;&gt;III&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 19 Feb 2015 11:11:00 -0800</pubDate>
        <link>http://localhost:4000/programming/2015/02/19/longest-palindromic-substring/</link>
        <guid isPermaLink="true">http://localhost:4000/programming/2015/02/19/longest-palindromic-substring/</guid>
      </item>
    
  </channel>
</rss>
